{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"About micro:bit The micro:bit Educational Foundation is a not-for-profit organisation. With the vision to inspire every child to create their best digital future. The Foundation was legally established with the support of its founding members (including the BBC) in September 2016. It became fully operational on 18th October 2016. The micro:bit Educational Foundation is a UK-based organisation and redistributes profit into providing free devices to exceptional micro:bit educational programmes across the globe. Mission Statement To enable and inspire all children to participate in the digital world, with particular focus on girls and those from disadvantaged groups. To make the micro:bit the easiest and most effective learning tool for digital skills and creativity. To Work in collaboration with educators to create and curate exceptional curriculum materials, training programmes and resources. To build and support communities of educators and partners to remove the barriers to learning digital skills About bit:board The bit:board is created to be in sync with the ethos of The micro:bit Educational Foundation. In addition, to provide a more friendly environment for younger audiences to get into programming and engineering. The bit:board serves as a stepping stone for our target audience into the STEM world.","title":"About micro:bit"},{"location":"#about-microbit","text":"The micro:bit Educational Foundation is a not-for-profit organisation. With the vision to inspire every child to create their best digital future. The Foundation was legally established with the support of its founding members (including the BBC) in September 2016. It became fully operational on 18th October 2016. The micro:bit Educational Foundation is a UK-based organisation and redistributes profit into providing free devices to exceptional micro:bit educational programmes across the globe.","title":"About micro:bit"},{"location":"#mission-statement","text":"To enable and inspire all children to participate in the digital world, with particular focus on girls and those from disadvantaged groups. To make the micro:bit the easiest and most effective learning tool for digital skills and creativity. To Work in collaboration with educators to create and curate exceptional curriculum materials, training programmes and resources. To build and support communities of educators and partners to remove the barriers to learning digital skills","title":"Mission Statement"},{"location":"#about-bitboard","text":"The bit:board is created to be in sync with the ethos of The micro:bit Educational Foundation. In addition, to provide a more friendly environment for younger audiences to get into programming and engineering. The bit:board serves as a stepping stone for our target audience into the STEM world.","title":"About bit:board"},{"location":"Meeting Minutes/","text":"Meeting Minutes This meeting minutes in this file are the summaries of meeting notes from members, for major meetings usually involve participants outside the team. This team had regular and less formal meetings throughout the project. Please see the separate file for the record. Compiling the bits and pieces from notebooks together has been a good review of the journey this team has gone through. 1. Briefing with Jonny Date: 30 Apr 2019 Venue: Room 610b Attendance: All team members except Thomas, Jonathan Austin from micro:bit Discussion: * Team members self-introduction From Jonny's briefing 3 useful resources from micro:bit suggested by the client: tech.microbit.org - documentations for previous work done; microbit.org - accessories guide; github, microbit-dal - the starting point for this project; Explanation of requirements: External accessory for the micro:bit BLE keyboard User-friendly Open-ended nature Production tools: ARM Mbed (online editor) MakeCode environment Typescript Action Plans: * James will get one micro:bit from Amazon * The client would send more micro:bits for the team to use and test * Research topics: * MakeCode Extensions * BLE library / profile * HID over GATT protocol * mega:bit accessory project from last year's Industrial Project group * Similar existing accessories e.g. bit:commander * Summarises research outcomes and questions before next Tuesday * Propose meeting with academic supervisor 2. Initial Concept Brainstorm Date: 2 May 2019 Venue: Level 3 Computer Labs Attendance: All team members Discussion: * Ideas generated: * Feature phone * Mouse-like keyboard * Customisable controller based on the PS4 controller * Music controller based on piano keyboard * Research outcomes were shared among members. * Questions about this project and requirements have been gathered for later meetings with Jonny and the academic supervisor. Proposed next team meeting: Before the end of week 1 3. 2nd meeting with the client from micro:bit Date: 14 May 2019 Venue: Room 610b Attendance: All team members and Mr. Jonathan Austin Discussion: * Possible concepts for keyboard: musical keyboard, game controller, Fortnite game, Makey-Makey, joystick, cardboard edge connector, draw and place, copper tape, graphite, ink, papier machine * MakeCode Extension * HOGP (HID over GATT protocol) * Clarified suggested cost range: similar to micro:bit itself, around 15 US dollars * Clarified restrictions on power usage of device and accessory * Additional production design guidelines: Cheap and useful, can be fitted inside a student's bag Action Plans: * Research existing accessories and similar products on the market * Continue brainstorming more ideas for the accessory * Verify BLE functionality of micro:bit * Meet again early next week 4. Team Meeting Date: 21 May 2019 Venue: Room 408 Attendance: All team members Discussion: * Listed down the possible inputs: - Joysticks - Dial - LED indicator - Buttons / touch sensors as keys * Ulterior design brainstorm - taking inspirations from Nintendo and MakeyMakey * Drawings of concept: triangle:bit Action Plans: * Research suitable components for suggested inputs * Try to realize BLE keyboard service based on micro:bit_presenter * Seek advices and suggestions from academic supervisor 5. Meeting with academic supervisor Date: 23 May 2019 Venue: Room 612 Attendance: All team members and Dr. Ed Stott Discussion * triangle:bit and modular design * physical connection - difficulties - possible solutions * electronic connections - wire / contacts / connector - spin contact pins - buses / SPI or I2C network * feasibility of graphite tracks and copper tape * introduce a drawing ground Action Plans: * Rethink the concept of triangle:bit * Find a suitable edge connector for the micro:bit * Verify the conductivity of the graphite pencil and copper tape * Verify wires suitable for kids, presumably cable with crocodile clip 6. Team Meeting Date: 28 May 2019 Venue: Level 3 Computer Labs Attendance: All team members Discussion: * Possible examples/tutorials for the accessory: * Battleship game * Potentiometer drawn with pencil * Pictogram * Maze game * Wire loop game * Comic strip * Online games (e.g. Crossy Road) over Bluetooth connection Action Plans: * Start working on the hardware prototype * Develop an Mbed code for input signals and related controls for the proposed examples. 7. Meeting on Leaflet and Poster Date: 6 June 2019 Venue: Level 1 Electronic Labs Attendance: All team members except Aina Discussion: * Minimum font for visibility from a distance * Contents in speech bubbles on the leaflet * Images to be included in the leaflet and poster * envelope, printing, marker, crop * What sections should be included into poster and key points for each section * Distribute work on contents on the poster among team members Action Plans: * Review leaflet content and design * Write contents for poster 8. Documentation Discussion Date: 18 June 2019 Venue: Level 3 Computer Labs Attendance: All team members Discussion * What should be included in our documentation * Job division among team members * Use the GitHub platform and mark down files for the documentation Action Plans: * Start documentation work * Arrange meeting with Jonny on Thursday 9. 3rd meeting with Jonny Date: 20 June 2019 Venue: Room 610b Attendance: All team members except Aina Discussion * Issues encountered when merging BLE with DAL * YOTTA and other production tool for BLE function development and debug * Publish the project on micro:bit's platform * Documentation details * Future works in summer * Potential to talk with accessory producer Action Plans * Continue working on merging BLE with DAL * Continue working on documentation","title":"Meeting Minutes"},{"location":"Meeting Minutes/#meeting-minutes","text":"This meeting minutes in this file are the summaries of meeting notes from members, for major meetings usually involve participants outside the team. This team had regular and less formal meetings throughout the project. Please see the separate file for the record. Compiling the bits and pieces from notebooks together has been a good review of the journey this team has gone through.","title":"Meeting Minutes"},{"location":"Meeting Minutes/#1-briefing-with-jonny","text":"Date: 30 Apr 2019 Venue: Room 610b Attendance: All team members except Thomas, Jonathan Austin from micro:bit Discussion: * Team members self-introduction","title":"1. Briefing with Jonny"},{"location":"Meeting Minutes/#from-jonnys-briefing","text":"3 useful resources from micro:bit suggested by the client: tech.microbit.org - documentations for previous work done; microbit.org - accessories guide; github, microbit-dal - the starting point for this project; Explanation of requirements: External accessory for the micro:bit BLE keyboard User-friendly Open-ended nature Production tools: ARM Mbed (online editor) MakeCode environment Typescript Action Plans: * James will get one micro:bit from Amazon * The client would send more micro:bits for the team to use and test * Research topics: * MakeCode Extensions * BLE library / profile * HID over GATT protocol * mega:bit accessory project from last year's Industrial Project group * Similar existing accessories e.g. bit:commander * Summarises research outcomes and questions before next Tuesday * Propose meeting with academic supervisor","title":"From Jonny's briefing"},{"location":"Meeting Minutes/#2-initial-concept-brainstorm","text":"Date: 2 May 2019 Venue: Level 3 Computer Labs Attendance: All team members Discussion: * Ideas generated: * Feature phone * Mouse-like keyboard * Customisable controller based on the PS4 controller * Music controller based on piano keyboard * Research outcomes were shared among members. * Questions about this project and requirements have been gathered for later meetings with Jonny and the academic supervisor. Proposed next team meeting: Before the end of week 1","title":"2. Initial Concept Brainstorm"},{"location":"Meeting Minutes/#3-2nd-meeting-with-the-client-from-microbit","text":"Date: 14 May 2019 Venue: Room 610b Attendance: All team members and Mr. Jonathan Austin Discussion: * Possible concepts for keyboard: musical keyboard, game controller, Fortnite game, Makey-Makey, joystick, cardboard edge connector, draw and place, copper tape, graphite, ink, papier machine * MakeCode Extension * HOGP (HID over GATT protocol) * Clarified suggested cost range: similar to micro:bit itself, around 15 US dollars * Clarified restrictions on power usage of device and accessory * Additional production design guidelines: Cheap and useful, can be fitted inside a student's bag Action Plans: * Research existing accessories and similar products on the market * Continue brainstorming more ideas for the accessory * Verify BLE functionality of micro:bit * Meet again early next week","title":"3. 2nd meeting with the client from micro:bit"},{"location":"Meeting Minutes/#4-team-meeting","text":"Date: 21 May 2019 Venue: Room 408 Attendance: All team members Discussion: * Listed down the possible inputs: - Joysticks - Dial - LED indicator - Buttons / touch sensors as keys * Ulterior design brainstorm - taking inspirations from Nintendo and MakeyMakey * Drawings of concept: triangle:bit Action Plans: * Research suitable components for suggested inputs * Try to realize BLE keyboard service based on micro:bit_presenter * Seek advices and suggestions from academic supervisor","title":"4. Team Meeting"},{"location":"Meeting Minutes/#5-meeting-with-academic-supervisor","text":"Date: 23 May 2019 Venue: Room 612 Attendance: All team members and Dr. Ed Stott Discussion * triangle:bit and modular design * physical connection - difficulties - possible solutions * electronic connections - wire / contacts / connector - spin contact pins - buses / SPI or I2C network * feasibility of graphite tracks and copper tape * introduce a drawing ground Action Plans: * Rethink the concept of triangle:bit * Find a suitable edge connector for the micro:bit * Verify the conductivity of the graphite pencil and copper tape * Verify wires suitable for kids, presumably cable with crocodile clip","title":"5. Meeting with academic supervisor"},{"location":"Meeting Minutes/#6-team-meeting","text":"Date: 28 May 2019 Venue: Level 3 Computer Labs Attendance: All team members Discussion: * Possible examples/tutorials for the accessory: * Battleship game * Potentiometer drawn with pencil * Pictogram * Maze game * Wire loop game * Comic strip * Online games (e.g. Crossy Road) over Bluetooth connection Action Plans: * Start working on the hardware prototype * Develop an Mbed code for input signals and related controls for the proposed examples.","title":"6. Team Meeting"},{"location":"Meeting Minutes/#7-meeting-on-leaflet-and-poster","text":"Date: 6 June 2019 Venue: Level 1 Electronic Labs Attendance: All team members except Aina Discussion: * Minimum font for visibility from a distance * Contents in speech bubbles on the leaflet * Images to be included in the leaflet and poster * envelope, printing, marker, crop * What sections should be included into poster and key points for each section * Distribute work on contents on the poster among team members Action Plans: * Review leaflet content and design * Write contents for poster","title":"7. Meeting on Leaflet and Poster"},{"location":"Meeting Minutes/#8-documentation-discussion","text":"Date: 18 June 2019 Venue: Level 3 Computer Labs Attendance: All team members Discussion * What should be included in our documentation * Job division among team members * Use the GitHub platform and mark down files for the documentation Action Plans: * Start documentation work * Arrange meeting with Jonny on Thursday","title":"8. Documentation Discussion"},{"location":"Meeting Minutes/#9-3rd-meeting-with-jonny","text":"Date: 20 June 2019 Venue: Room 610b Attendance: All team members except Aina Discussion * Issues encountered when merging BLE with DAL * YOTTA and other production tool for BLE function development and debug * Publish the project on micro:bit's platform * Documentation details * Future works in summer * Potential to talk with accessory producer Action Plans * Continue working on merging BLE with DAL * Continue working on documentation","title":"9. 3rd meeting with Jonny"},{"location":"PDS/","text":"Product Design Specification (PDS) The PDS describes requirements that bit:board ought to meet to satisfy the problem statement. Performance bit:board is expected to bring an educational impact (especially in computer science) to the user. It has to be a keyboard that includes touch sensors and utilises the Bluetooth Low Energy(BLE) functionality and as our target audience is children aged 11-12, user interface should be easy-to-use. Environment During transport, storage and usage, bit:board should be able to withstand moderate impact and normal conditions such as average humidity and temperature. Life in Service bit:board aims for a long life span(i.e. 2 years), working for 1-2 hours a day. Materials chosen should be robust for long usage. Maintenance No professional maintenance required as all components would be hidden from the user for safety reason. Common maintenance includes change of batteries and cleaning of surface of touch sensors for better sensitivity. Target Product Cost Aims to have the retail price to be lower than the BBC micro:bit (~\u00a317). Hence, for mass production, PCB would be designed to include touch sensors on board to lower cost for components. Competition There is no similar products in the market at the moment - no accessories so far makes use of BLE and includes a canvas as part of the controller. There are micro:bit accessories that function as game controllers such as :GAME ZIP64 and bit:commander. In addition, micro:bit accessory that includes touch sensors is touch:bit. Shipping bit:board is likely to be in batch production. Since it will be manufactured and distributed in the UK, local carriers can be used to send bit:boards from manufacturer to distributor. Shipping of bit:board to international users would be done by distributor. Packaging An outer housing to pack the bit:board will be required when in transportation. Quantity Generally, the production volume will be in small incremental steps. To test the water, an initial volume of 200 units will be produced. If the launch of bit:board is successful, then batch volume should be increased by 100 units at each milestone. Manufacturing Facility For mass production, PCB is likely to be printed by an external manufacturer, meaning that manufacture of PCBs would be outsourced. For the outer layers of bit:board, a laser cutter is needed. If the cost of production for laser cutting is desirable, then it is likely to be outsourced as well. Customer Target audience of bit:board is children aged 11-12. Parents are also potential customers as bit:board encourages interactions between parents and children, teacher and students. Size Should be smaller or equal to A4 size (i.e. 21.0 x 29.7cm) to be able to fit inside a typical school bag Weight Should be lightweight to reduce the pressure on the user when carrying bit:board around. Yet, bit:board does not need to be lifted up during usage, so being weight-efficient would not be a concern. Materials To reduce the impact on the environment, bit:board's outer layer would be made from wood (i.e. birch plywood 3mm). Electrical components such as 4 touch sensors, a joystick, 4 IC switches, 4 LEDs, edge connector and wires would be needed. Adhesives are also needed to put wood pieces together. Product Life Span bit:board would be in the market for around a year, and a new improved version would be developed in the mean time. Aesthetics, Appearance and Finish Since bit:board is made from birch plywood, bit:board would make use of the natural wood pattern, smoothed out using sandpaper of 300-400 grit, finished by applying a layer of Beeswax for aesthetic. Ergonomics bit:board is designed to be used while sitting on a surface. There should be no sharp edges or corner and should be smooth to touch. The inputs should be placed at suitable distance from each other, so they are not too far or too near to each other. Standards and Specification If bit:board is released to the European micro:bit accessories market, then it must obtain the CE mark and the BSI Kitemark. Quality and Reliability Mean time before repair : depends on the battery life Mean time before failure : since electrical wiring and components are enclosed, with the robust design of bit:board, it should be able to last as long as the life expectancy before any failure Shelf Life(storage) bit:board should be stored in a cool,dry place to prevent any issue rising from the electronic components Testing BLE should be tested before being released to the market Processes Laser cutting of the wooden case Creation of MakeCode package Circuit Design Time Scale Idea generation from meeting with client - Summer term week 0-1 Product, leaflet and poster design - Summer term week 2-6 Hackbooth demonstration - Summer term week 7 Documentation - Summer term week 8-9 Safety Legal guidelines To make bit:board available on the market, all parameters must abide to the EU safety regulations Manufacturing Hazards Wiring must not be exposed, and multimeter should be used to check if electrically safe Operational Hazards Rough use and violent treatment of product should be avoided even though robustness is taken into account in product design Company Constraints We are limited to \u00a3500 budget. Third-party suppliers must be approved by Imperial College London. Market Constraints Market constraints are difficult to estimate as there is not much data on the micro:bit accessories market. Moreover, there are no similar implementation in the market, so there are no references to take from. Patents, Literature and Product Data No patents are needed. Legal Microsoft MakeCode is under the MIT License. Please see more information about the MIT License at: MIT License Political and Social Implications bit:board promotes science, technology, engineering and mathematics (STEM) and aims to improve the understanding in the field of computer science. Installation Users are only required to replace the canvas and insert the micro:bit into the edge connector of bit:board for the operation. Documentation Documentation is made into GitHub pages for references: Documentation for bit:board Disposal As birch plywood is used for the casing, most parts of the bit:board are recyclable. However, electrical components (e.g. batteries, touch sensors and joystick) should be separated from the bit:board before disposal to reduce impact on the environment.","title":"Product Design Specification"},{"location":"PDS/#product-design-specification-pds","text":"The PDS describes requirements that bit:board ought to meet to satisfy the problem statement.","title":"Product Design Specification (PDS)"},{"location":"PDS/#performance","text":"bit:board is expected to bring an educational impact (especially in computer science) to the user. It has to be a keyboard that includes touch sensors and utilises the Bluetooth Low Energy(BLE) functionality and as our target audience is children aged 11-12, user interface should be easy-to-use.","title":"Performance"},{"location":"PDS/#environment","text":"During transport, storage and usage, bit:board should be able to withstand moderate impact and normal conditions such as average humidity and temperature.","title":"Environment"},{"location":"PDS/#life-in-service","text":"bit:board aims for a long life span(i.e. 2 years), working for 1-2 hours a day. Materials chosen should be robust for long usage.","title":"Life in Service"},{"location":"PDS/#maintenance","text":"No professional maintenance required as all components would be hidden from the user for safety reason. Common maintenance includes change of batteries and cleaning of surface of touch sensors for better sensitivity.","title":"Maintenance"},{"location":"PDS/#target-product-cost","text":"Aims to have the retail price to be lower than the BBC micro:bit (~\u00a317). Hence, for mass production, PCB would be designed to include touch sensors on board to lower cost for components.","title":"Target Product Cost"},{"location":"PDS/#competition","text":"There is no similar products in the market at the moment - no accessories so far makes use of BLE and includes a canvas as part of the controller. There are micro:bit accessories that function as game controllers such as :GAME ZIP64 and bit:commander. In addition, micro:bit accessory that includes touch sensors is touch:bit.","title":"Competition"},{"location":"PDS/#shipping","text":"bit:board is likely to be in batch production. Since it will be manufactured and distributed in the UK, local carriers can be used to send bit:boards from manufacturer to distributor. Shipping of bit:board to international users would be done by distributor.","title":"Shipping"},{"location":"PDS/#packaging","text":"An outer housing to pack the bit:board will be required when in transportation.","title":"Packaging"},{"location":"PDS/#quantity","text":"Generally, the production volume will be in small incremental steps. To test the water, an initial volume of 200 units will be produced. If the launch of bit:board is successful, then batch volume should be increased by 100 units at each milestone.","title":"Quantity"},{"location":"PDS/#manufacturing-facility","text":"For mass production, PCB is likely to be printed by an external manufacturer, meaning that manufacture of PCBs would be outsourced. For the outer layers of bit:board, a laser cutter is needed. If the cost of production for laser cutting is desirable, then it is likely to be outsourced as well.","title":"Manufacturing Facility"},{"location":"PDS/#customer","text":"Target audience of bit:board is children aged 11-12. Parents are also potential customers as bit:board encourages interactions between parents and children, teacher and students.","title":"Customer"},{"location":"PDS/#size","text":"Should be smaller or equal to A4 size (i.e. 21.0 x 29.7cm) to be able to fit inside a typical school bag","title":"Size"},{"location":"PDS/#weight","text":"Should be lightweight to reduce the pressure on the user when carrying bit:board around. Yet, bit:board does not need to be lifted up during usage, so being weight-efficient would not be a concern.","title":"Weight"},{"location":"PDS/#materials","text":"To reduce the impact on the environment, bit:board's outer layer would be made from wood (i.e. birch plywood 3mm). Electrical components such as 4 touch sensors, a joystick, 4 IC switches, 4 LEDs, edge connector and wires would be needed. Adhesives are also needed to put wood pieces together.","title":"Materials"},{"location":"PDS/#product-life-span","text":"bit:board would be in the market for around a year, and a new improved version would be developed in the mean time.","title":"Product Life Span"},{"location":"PDS/#aesthetics-appearance-and-finish","text":"Since bit:board is made from birch plywood, bit:board would make use of the natural wood pattern, smoothed out using sandpaper of 300-400 grit, finished by applying a layer of Beeswax for aesthetic.","title":"Aesthetics, Appearance and Finish"},{"location":"PDS/#ergonomics","text":"bit:board is designed to be used while sitting on a surface. There should be no sharp edges or corner and should be smooth to touch. The inputs should be placed at suitable distance from each other, so they are not too far or too near to each other.","title":"Ergonomics"},{"location":"PDS/#standards-and-specification","text":"If bit:board is released to the European micro:bit accessories market, then it must obtain the CE mark and the BSI Kitemark.","title":"Standards and Specification"},{"location":"PDS/#quality-and-reliability","text":"Mean time before repair : depends on the battery life Mean time before failure : since electrical wiring and components are enclosed, with the robust design of bit:board, it should be able to last as long as the life expectancy before any failure","title":"Quality and Reliability"},{"location":"PDS/#shelf-lifestorage","text":"bit:board should be stored in a cool,dry place to prevent any issue rising from the electronic components","title":"Shelf Life(storage)"},{"location":"PDS/#testing","text":"BLE should be tested before being released to the market","title":"Testing"},{"location":"PDS/#processes","text":"Laser cutting of the wooden case Creation of MakeCode package Circuit Design","title":"Processes"},{"location":"PDS/#time-scale","text":"Idea generation from meeting with client - Summer term week 0-1 Product, leaflet and poster design - Summer term week 2-6 Hackbooth demonstration - Summer term week 7 Documentation - Summer term week 8-9","title":"Time Scale"},{"location":"PDS/#safety","text":"Legal guidelines To make bit:board available on the market, all parameters must abide to the EU safety regulations Manufacturing Hazards Wiring must not be exposed, and multimeter should be used to check if electrically safe Operational Hazards Rough use and violent treatment of product should be avoided even though robustness is taken into account in product design","title":"Safety"},{"location":"PDS/#company-constraints","text":"We are limited to \u00a3500 budget. Third-party suppliers must be approved by Imperial College London.","title":"Company Constraints"},{"location":"PDS/#market-constraints","text":"Market constraints are difficult to estimate as there is not much data on the micro:bit accessories market. Moreover, there are no similar implementation in the market, so there are no references to take from.","title":"Market Constraints"},{"location":"PDS/#patents-literature-and-product-data","text":"No patents are needed.","title":"Patents, Literature and Product Data"},{"location":"PDS/#legal","text":"Microsoft MakeCode is under the MIT License. Please see more information about the MIT License at: MIT License","title":"Legal"},{"location":"PDS/#political-and-social-implications","text":"bit:board promotes science, technology, engineering and mathematics (STEM) and aims to improve the understanding in the field of computer science.","title":"Political and Social Implications"},{"location":"PDS/#installation","text":"Users are only required to replace the canvas and insert the micro:bit into the edge connector of bit:board for the operation.","title":"Installation"},{"location":"PDS/#documentation","text":"Documentation is made into GitHub pages for references: Documentation for bit:board","title":"Documentation"},{"location":"PDS/#disposal","text":"As birch plywood is used for the casing, most parts of the bit:board are recyclable. However, electrical components (e.g. batteries, touch sensors and joystick) should be separated from the bit:board before disposal to reduce impact on the environment.","title":"Disposal"},{"location":"bill_of_material/","text":"Bill of Material When preparing for the bill of material for the final product, 200 units were considered. The table below lists out all the components that will be used to manufacture the final product, along with their corresponding unit cost:","title":"Bill of Material"},{"location":"bill_of_material/#bill-of-material","text":"When preparing for the bill of material for the final product, 200 units were considered. The table below lists out all the components that will be used to manufacture the final product, along with their corresponding unit cost:","title":"Bill of Material"},{"location":"circuit_diagram/","text":"Circuit Diagram A stripboard was used to connect the fixed set of inputs (joystick and touch sensors) to the BBC micro:bit. The following circuit diagram illustrates how the inputs are interconnected and shows the necessary components required to complement the inputs. Based on the circuit diagram above, the components required for the prototype were soldered onto a stripboard. The following layout was designed to keep all the components compact in order to reduce the area required. Components Required: Joystick Capacitive Touch Sensor Bi-colour LED Switch Resistor micro:bit Breakout Board Joystick The joystick used has two axes and it is commonly used to represent the arrow keys on a keyboard. Each axis is a potentiometer and they are independent of each other. By dividing the voltage applied to the joystick, analogue inputs can be sent to the analogue pins of the micro:bit. These analogue readings will then be used to set thresholds when determining the sensitivity of the joystick. Capacitive Touch Sensor This sensor can detect touch by measuring the change in capacitance. It is a breakout board that utilises the TTP223 IC, which has touch detection. The IC is in direct mode and has an active high output. This means that the output will go high whenever the touch pad is touched and will go back to low when touch is not detected. A digital pin from the micro:bit can be used to read the output of this sensor. Bi-colour LED Instead of a standard LED that has a single colour when it lights up, two colours were used to indicate different states: touched and not touched. This LED is either green or red when it lights up. It is essentially two LEDs that share a common cathode, causing it to have three leads. Switch This is a MAX4544 switch, which is a single-pole, double-throw (SPDT) analogue switch. It can be used to complete either one of the two available circuits depending on a single digital input. When the input is driven high, the switch will close the circuit that is connected via the normally open (NO) terminal. If a low input is applied instead, the switch will then toggle back to the normally closed (NC) terminal. Resistor The use of resistors in the prototype stripboard is to control the amount of current in the circuit, in order to prevent any damages to the LEDs. By allowing more current to flow, the LEDs will glow brighter. For a significant brightness, a 220 \u03a9 resistor is used for green light and a 750 \u03a9 resistor is used for red light. micro:bit Breakout Board An edge connector is used to allow direct access to the pins of the micro:bit. However, a breakout board is required for the prototype stripboard because the pitch of the edge connector is too narrow for the stripboard. The breakout board used also reduced the number of pins from the edge connector to the actual number of distinct pins available from the micro:bit.","title":"Circuit Diagram"},{"location":"circuit_diagram/#circuit-diagram","text":"A stripboard was used to connect the fixed set of inputs (joystick and touch sensors) to the BBC micro:bit. The following circuit diagram illustrates how the inputs are interconnected and shows the necessary components required to complement the inputs. Based on the circuit diagram above, the components required for the prototype were soldered onto a stripboard. The following layout was designed to keep all the components compact in order to reduce the area required.","title":"Circuit Diagram"},{"location":"circuit_diagram/#components-required","text":"Joystick Capacitive Touch Sensor Bi-colour LED Switch Resistor micro:bit Breakout Board","title":"Components Required:"},{"location":"circuit_diagram/#joystick","text":"The joystick used has two axes and it is commonly used to represent the arrow keys on a keyboard. Each axis is a potentiometer and they are independent of each other. By dividing the voltage applied to the joystick, analogue inputs can be sent to the analogue pins of the micro:bit. These analogue readings will then be used to set thresholds when determining the sensitivity of the joystick.","title":"Joystick"},{"location":"circuit_diagram/#capacitive-touch-sensor","text":"This sensor can detect touch by measuring the change in capacitance. It is a breakout board that utilises the TTP223 IC, which has touch detection. The IC is in direct mode and has an active high output. This means that the output will go high whenever the touch pad is touched and will go back to low when touch is not detected. A digital pin from the micro:bit can be used to read the output of this sensor.","title":"Capacitive Touch Sensor"},{"location":"circuit_diagram/#bi-colour-led","text":"Instead of a standard LED that has a single colour when it lights up, two colours were used to indicate different states: touched and not touched. This LED is either green or red when it lights up. It is essentially two LEDs that share a common cathode, causing it to have three leads.","title":"Bi-colour LED"},{"location":"circuit_diagram/#switch","text":"This is a MAX4544 switch, which is a single-pole, double-throw (SPDT) analogue switch. It can be used to complete either one of the two available circuits depending on a single digital input. When the input is driven high, the switch will close the circuit that is connected via the normally open (NO) terminal. If a low input is applied instead, the switch will then toggle back to the normally closed (NC) terminal.","title":"Switch"},{"location":"circuit_diagram/#resistor","text":"The use of resistors in the prototype stripboard is to control the amount of current in the circuit, in order to prevent any damages to the LEDs. By allowing more current to flow, the LEDs will glow brighter. For a significant brightness, a 220 \u03a9 resistor is used for green light and a 750 \u03a9 resistor is used for red light.","title":"Resistor"},{"location":"circuit_diagram/#microbit-breakout-board","text":"An edge connector is used to allow direct access to the pins of the micro:bit. However, a breakout board is required for the prototype stripboard because the pitch of the edge connector is too narrow for the stripboard. The breakout board used also reduced the number of pins from the edge connector to the actual number of distinct pins available from the micro:bit.","title":"micro:bit Breakout Board"},{"location":"concept_generation/","text":"Concept generation This page introduces 3 concepts as solutions to the problem statement, including sketch:it, triangle:bit and bit:board. sketch:it sketch:it attempts to include drawing into the world of electronics, and this is made possible by the fact that graphite conducts electricity. It has been proven that micro:bit reacts to hand-drawn buttons using graphite pencils, which make use of capacitive touch sensing. sketch:it makes use of this property; users can draw their own buttons, hence creating their own controller. Physical features sketch:it includes fixed inputs: 4 touch sensors and a joystick. micro:bit is connected to the sketch:it via the edge connector to use the fixed inputs. If the user opts to use hand-drawn buttons, then they can simply insert the micro:bit into the space next to the edge connector. The user draws the buttons on paper and slide it into the slot at the bottom of the sketch:it. With micro:bit inserted into the space, connection is established between the graphite tracks and the edge of micro:bit. triangle:bit triangle:bit takes its inspiration from Scrabble Flash from Hasbro Games, which consists of 5 electronic blocks; each block shows a letter and blocks are put together to make words. triangle:bit works on a similar idea, where blocks of inputs are put together along with the main block according to the user's liking to form different shapes. As seen from above, this design allows flexibility in shapes of the product, making customization easy. Blocks Three types of blocks are considered: input blocks, intermediate blocks and the main block. + Input blocks: Inputs including joystick, touch sensors and dial + Intermediate blocks: provides connection between input blocks and the main block + The main block: holds the micro:bit bit:board bit:board - takes its name from clipboard - includes a canvas and a set of fixed inputs(joystick and 4 touch sensors). bit:board unleashes user's imagination and explores the potential of micro:bit. Users can draw their own buttons - similar to sketch:it - but could also make use of the fixed inputs. The difference between bit:board and sketch:it is that bit:board is more oriented to developing an understanding of electronic circuits; bit:board makes pins of micro:bit more accessible, giving more flexibility in input creation. Canvas The canvas should ideally take the size of A5, and held down by clips which is hard-wired to pins of micro:bit and should also allow electrical connection to realize any 'components' (i.e. buttons or potentiometers) drawn. Change of input modes bit:board allows 3 input modes, and can be changed via crocodile clips: + Fixed inputs: allows user to make use to the fixed inputs only(i.e. joystick and 4 touch sensors) + Customized inputs: users can create their own inputs to micro:bit via different means of conducting material such as graphite pencils or copper tape + Mixed inputs: users could make use of both fixed inputs and customized inputs at the same time, depending on pin arrangement of the micro:bit","title":"Concept Generation"},{"location":"concept_generation/#concept-generation","text":"This page introduces 3 concepts as solutions to the problem statement, including sketch:it, triangle:bit and bit:board.","title":"Concept generation"},{"location":"concept_generation/#sketchit","text":"sketch:it attempts to include drawing into the world of electronics, and this is made possible by the fact that graphite conducts electricity. It has been proven that micro:bit reacts to hand-drawn buttons using graphite pencils, which make use of capacitive touch sensing. sketch:it makes use of this property; users can draw their own buttons, hence creating their own controller.","title":"sketch:it"},{"location":"concept_generation/#physical-features","text":"sketch:it includes fixed inputs: 4 touch sensors and a joystick. micro:bit is connected to the sketch:it via the edge connector to use the fixed inputs. If the user opts to use hand-drawn buttons, then they can simply insert the micro:bit into the space next to the edge connector. The user draws the buttons on paper and slide it into the slot at the bottom of the sketch:it. With micro:bit inserted into the space, connection is established between the graphite tracks and the edge of micro:bit.","title":"Physical features"},{"location":"concept_generation/#trianglebit","text":"triangle:bit takes its inspiration from Scrabble Flash from Hasbro Games, which consists of 5 electronic blocks; each block shows a letter and blocks are put together to make words. triangle:bit works on a similar idea, where blocks of inputs are put together along with the main block according to the user's liking to form different shapes. As seen from above, this design allows flexibility in shapes of the product, making customization easy.","title":"triangle:bit"},{"location":"concept_generation/#blocks","text":"Three types of blocks are considered: input blocks, intermediate blocks and the main block. + Input blocks: Inputs including joystick, touch sensors and dial + Intermediate blocks: provides connection between input blocks and the main block + The main block: holds the micro:bit","title":"Blocks"},{"location":"concept_generation/#bitboard","text":"bit:board - takes its name from clipboard - includes a canvas and a set of fixed inputs(joystick and 4 touch sensors). bit:board unleashes user's imagination and explores the potential of micro:bit. Users can draw their own buttons - similar to sketch:it - but could also make use of the fixed inputs. The difference between bit:board and sketch:it is that bit:board is more oriented to developing an understanding of electronic circuits; bit:board makes pins of micro:bit more accessible, giving more flexibility in input creation.","title":"bit:board"},{"location":"concept_generation/#canvas","text":"The canvas should ideally take the size of A5, and held down by clips which is hard-wired to pins of micro:bit and should also allow electrical connection to realize any 'components' (i.e. buttons or potentiometers) drawn.","title":"Canvas"},{"location":"concept_generation/#change-of-input-modes","text":"bit:board allows 3 input modes, and can be changed via crocodile clips: + Fixed inputs: allows user to make use to the fixed inputs only(i.e. joystick and 4 touch sensors) + Customized inputs: users can create their own inputs to micro:bit via different means of conducting material such as graphite pencils or copper tape + Mixed inputs: users could make use of both fixed inputs and customized inputs at the same time, depending on pin arrangement of the micro:bit","title":"Change of input modes"},{"location":"concept_selection/","text":"Concept selection Solutions are compared using the weighted matrix method, where the solutions are given scores in different criteria and the solution with the highest score will be chosen as final solution. Please refer to the 'concept generation' page for details of solutions. Criteria Criteria are chosen for their relevance to the problem statement, and below explains how scores are defined for the criteria: + Life Expectancy: how long the product is expected to last + Target Product Cost: cost used to produce each product compared to budget given for product development + Aesthetic: how appealing the product is to target audience + Materials: the cost and durability of material + Safety: how safe would the product be when in use + Ergonomics: how the product is designed to fit the user + Processes: how complicated/how long it takes to produce the product + Competition: how easy it is for the product to enter the market + Disposal: environmental impact that the product brings + Weight: weight of the product Selected outcome The solution with the highest score is bit:board, which with much modification shall become the final solution. More details of the bit:board under 'Design'.","title":"Concept Selection"},{"location":"concept_selection/#concept-selection","text":"Solutions are compared using the weighted matrix method, where the solutions are given scores in different criteria and the solution with the highest score will be chosen as final solution. Please refer to the 'concept generation' page for details of solutions.","title":"Concept selection"},{"location":"concept_selection/#criteria","text":"Criteria are chosen for their relevance to the problem statement, and below explains how scores are defined for the criteria: + Life Expectancy: how long the product is expected to last + Target Product Cost: cost used to produce each product compared to budget given for product development + Aesthetic: how appealing the product is to target audience + Materials: the cost and durability of material + Safety: how safe would the product be when in use + Ergonomics: how the product is designed to fit the user + Processes: how complicated/how long it takes to produce the product + Competition: how easy it is for the product to enter the market + Disposal: environmental impact that the product brings + Weight: weight of the product","title":"Criteria"},{"location":"concept_selection/#selected-outcome","text":"The solution with the highest score is bit:board, which with much modification shall become the final solution. More details of the bit:board under 'Design'.","title":"Selected outcome"},{"location":"contact/","text":"Contact Details If you have any questions or interested in our project, please feel free to contact the team. Name Email Group Group9MicrobitBLEHIDAccessory@groups.imperial.ac.uk Aina nur.muhammad-naim16@imperial.ac.uk Daniel zhi.si16@imperial.ac.uk Gladys fai.lau16@imperial.ac.uk James xinyuan.xu16@imperial.ac.uk Thomas tze.tang16@imperial.ac.uk","title":"Contact the Team"},{"location":"contact/#contact-details","text":"If you have any questions or interested in our project, please feel free to contact the team. Name Email Group Group9MicrobitBLEHIDAccessory@groups.imperial.ac.uk Aina nur.muhammad-naim16@imperial.ac.uk Daniel zhi.si16@imperial.ac.uk Gladys fai.lau16@imperial.ac.uk James xinyuan.xu16@imperial.ac.uk Thomas tze.tang16@imperial.ac.uk","title":"Contact Details"},{"location":"ethical/","text":"Ethical Consequences bit:board has the same aim as micro:bit, which is to inspire children's interest in learning electronics and programming. The development of bit:board always keeps this in mind. By developing this open platform, the team hopes that it could be the place for future generations to release their creativity, facilitate their education, especially for girls. bit:board is not a cutting-edge product, but this doesn't mean the quality is low. The team continuously polished the product during the prototyping and verification stage. For instance, a lot of parameters that control the sensitivity of the touch pads and joystick have been tuned patiently, making it more user-friendly. Safety is another aspect that has always been taken into consideration. For example, the wooden case made had been smoothen out with sandpaper by hand especially the corners. This would minimise the chances of any injuries when using the bit:board. Sustainability consideration The product needs to be both environmental friendly and social-economically beneficial. When deciding the material used for the prototype, wood was selected over acrylic, which is a non-biodegradable plastic. Electronic components and other production materials have also been purchased from suppliers approved by the university. bit:board has also been designed to have a lifespan of 2 years. This is possible due to the creative freedom bit:board has to offer as compared to a single-use product. Users can realise projects of various difficulties when using bit:board as their learning deepens. Since the bit:board is reusable and most parts are recyclable, less waste is produced. The team and micro:bit foundation would also continue to develop new and interesting examples for users in order to keep bit:board a useful and relevant tool.","title":"Ethical Consequences / Sustainability"},{"location":"ethical/#ethical-consequences","text":"bit:board has the same aim as micro:bit, which is to inspire children's interest in learning electronics and programming. The development of bit:board always keeps this in mind. By developing this open platform, the team hopes that it could be the place for future generations to release their creativity, facilitate their education, especially for girls. bit:board is not a cutting-edge product, but this doesn't mean the quality is low. The team continuously polished the product during the prototyping and verification stage. For instance, a lot of parameters that control the sensitivity of the touch pads and joystick have been tuned patiently, making it more user-friendly. Safety is another aspect that has always been taken into consideration. For example, the wooden case made had been smoothen out with sandpaper by hand especially the corners. This would minimise the chances of any injuries when using the bit:board.","title":"Ethical Consequences"},{"location":"ethical/#sustainability-consideration","text":"The product needs to be both environmental friendly and social-economically beneficial. When deciding the material used for the prototype, wood was selected over acrylic, which is a non-biodegradable plastic. Electronic components and other production materials have also been purchased from suppliers approved by the university. bit:board has also been designed to have a lifespan of 2 years. This is possible due to the creative freedom bit:board has to offer as compared to a single-use product. Users can realise projects of various difficulties when using bit:board as their learning deepens. Since the bit:board is reusable and most parts are recyclable, less waste is produced. The team and micro:bit foundation would also continue to develop new and interesting examples for users in order to keep bit:board a useful and relevant tool.","title":"Sustainability consideration"},{"location":"gallery/","text":"Gallery bit:board Leaflet Poster for Hackbooth Demonstration","title":"Gallery"},{"location":"gallery/#gallery","text":"","title":"Gallery"},{"location":"gallery/#bitboard","text":"","title":"bit:board"},{"location":"gallery/#leaflet","text":"","title":"Leaflet"},{"location":"gallery/#poster-for-hackbooth-demonstration","text":"","title":"Poster for Hackbooth Demonstration"},{"location":"makecode_package/","text":"MakeCode Package for bit:board Per our client's request, the extension is not made only for bit:board, but as a general Bluetooth Low Energy (BLE) keyboard, so the extension can also be used for other projects. To use the extension, press the 'cog' at top right corner, choose 'Extensions' and enter \"https://github.com/bit-board/pxt-bitboard\" in the search box. Blocks All blocks send key commands from micro:bit to another Bluetooth-enabled device via BLE. Keys The package covers common keys such as strings(i.e. any combination of letters, numbers and symbols), functional keys (i.e. enter, space, backspace, tab, escape and capslock), F keys(i.e. F1-F12), directions(i.e. up, down, left, right, pageup and pagedown), and volume(i.e. up, down and mute). Package Customisation Colour of the extension has been set to #F47442 and uses the icon 'gamepad' in the Semantic UI icon set.","title":"MakeCode Package"},{"location":"makecode_package/#makecode-package-for-bitboard","text":"Per our client's request, the extension is not made only for bit:board, but as a general Bluetooth Low Energy (BLE) keyboard, so the extension can also be used for other projects. To use the extension, press the 'cog' at top right corner, choose 'Extensions' and enter \"https://github.com/bit-board/pxt-bitboard\" in the search box.","title":"MakeCode Package for bit:board"},{"location":"makecode_package/#blocks","text":"All blocks send key commands from micro:bit to another Bluetooth-enabled device via BLE.","title":"Blocks"},{"location":"makecode_package/#keys","text":"The package covers common keys such as strings(i.e. any combination of letters, numbers and symbols), functional keys (i.e. enter, space, backspace, tab, escape and capslock), F keys(i.e. F1-F12), directions(i.e. up, down, left, right, pageup and pagedown), and volume(i.e. up, down and mute).","title":"Keys"},{"location":"makecode_package/#package-customisation","text":"Colour of the extension has been set to #F47442 and uses the icon 'gamepad' in the Semantic UI icon set.","title":"Package Customisation"},{"location":"mbed/","text":"Implementation of BLE HID Keyboard service in Mbed This implementation requires the following library #include mbed.h #include ble/BLE.h #include KeyboardService.h #include MicroBitPin.h #include examples_common.h #include MicroBit.h We must first construct a BLE and KeyboardService object, and also declare some of the pins we will use on the micro:bit as inputs and outputs // Construct BLE and KeyboardService object BLE ble; KeyboardService *kbdServicePtr; // pins on the micro:bit on the LED matrix DigitalOut col9(P0_12, 0); DigitalOut waiting_led(P0_13); DigitalOut connected_led(P0_15); // pins on the micro:bit for button A and B InterruptIn button1(BUTTON_A); InterruptIn button2(BUTTON_B); // pins for touch switch and joystick DigitalIn touch1(MICROBIT_PIN_P13); AnalogIn x_axis(MICROBIT_PIN_P0); AnalogIn y_axis(MICROBIT_PIN_P1); Several functions are also defined here. We first define callback functions in the event of a connection, disconnection and waiting for connection. static void onDisconnect(const Gap::DisconnectionCallbackParams_t *params) { HID_DEBUG( disconnected\\r\\n ); connected_led = 0; ble.gap().startAdvertising(); // restart advertising } static void onConnect(const Gap::ConnectionCallbackParams_t *params) { HID_DEBUG( connected\\r\\n ); waiting_led = false; } static void waiting() { if (!kbdServicePtr- isConnected()) waiting_led = !waiting_led; else connected_led = !connected_led; } void send_string(const char * c) { if (!kbdServicePtr) return; if (!kbdServicePtr- isConnected()) { HID_DEBUG( we haven't connected yet... ); } else { int len = strlen(c); kbdServicePtr- printf(c); HID_DEBUG( sending %d chars\\r\\n , len); } } We define some functions for joystick and touch switch inputs void JoystickControl(){ float x,y; // threshold values for the joystick to convert analogue input to digital x = x_axis.read(); if (x 0.05f) send_left(); if (x 0.95f) send_right(); y = y_axis.read(); if (y 0.05f) send_down(); if (y 0.95f) send_up(); wait(0.05); } void touch_control(){ if (touch1 == 1) send_space(); wait(0.05); } Within main A ticker object is created to call waiting() in every certain amount of time, in this case, we will choose 1 second. Ticker heartbeat; // call function send_one and send_zero if button A and B is pressed on the rising edge button1.rise(send_one); button2.rise(send_zero); // call waiting every 1 second using the ticker object heartbeat.attach(waiting, 1); The BLE object needs to be initialised after being constructed, the callback function onConnect and onDisconnect is also 'attached' in the event of a connect and disconnect sent from the GAP service. // initialise ble object ble.init(); // attach callback functions on the event of connection and disconnection ble.gap().onDisconnection(onDisconnect); ble.gap().onConnection(onConnect); For the micro:bit to advertise itself as a BLE HID Keyboard, the BLE object must contain the suitable security properties, device information and battery service information. initializeSecurity(ble) adds security properties required KeyboardService(ble) adds a keyboard service to the GATT table inside the BLE object (BLE_HID/KeyboardService.h) initializeHOGP(ble) adds more information to the BLE object, such as a pnp id and battery service information required for HOGP (HID Over Gatt Protocol) initializeSecurity(ble); KeyboardService kbdService(ble); kbdServicePtr = kbdService; initializeHOGP(ble); GAP handles device discovery, link establishment, link termination and more. The GAP service is then used to advertise the micro:bit as a BLE HID Keyboard. // setting up gap service ble.gap().accumulateAdvertisingPayload(GapAdvertisingData::KEYBOARD); ble.gap().accumulateAdvertisingPayload(GapAdvertisingData::COMPLETE_LOCAL_NAME, (uint8_t *)DEVICE_NAME, sizeof(DEVICE_NAME)); ble.gap().accumulateAdvertisingPayload(GapAdvertisingData::SHORTENED_LOCAL_NAME, (uint8_t *)SHORT_DEVICE_NAME, sizeof(SHORT_DEVICE_NAME)); ble.gap().setDeviceName((const uint8_t *)DEVICE_NAME); // advertise device ble.gap().startAdvertising(); We then implement a polling rate of 125Hz for the keyboard. 125Hz is chosen instead of 1000Hz to conserve power. while (true) { ble.waitForEvent(); JoystickControl(); touch_control(); // poll every 8ms, or 125Hz wait_ms(8); } Inside initializeSecurity() It is important to initialize the security properties for the BLE object, this is done to prevent the security issues during the pairing process, these security issues include: Passive eavesdropping MITM (man-in-the-middle) attacks Identity tracking. void initializeSecurity(BLE ble) { bool enableBonding = true; bool requireMITM = HID_SECURITY_REQUIRE_MITM; ble.securityManager().onSecuritySetupInitiated(securitySetupInitiatedCallback); ble.securityManager().onPasskeyDisplay(passkeyDisplayCallback); ble.securityManager().onSecuritySetupCompleted(securitySetupCompletedCallback); ble.securityManager().init(enableBonding, requireMITM, HID_SECURITY_IOCAPS); } Inside initializeHOGP() Device information and Battery service is required for the device to advertise itself to client device. void initializeHOGP(BLE ble) { static const uint16_t uuid16_list[] = {GattService::UUID_HUMAN_INTERFACE_DEVICE_SERVICE, GattService::UUID_DEVICE_INFORMATION_SERVICE, GattService::UUID_BATTERY_SERVICE}; PnPID_t pnpID; pnpID.vendorID_source = 0x2; // from the USB Implementer's Forum pnpID.vendorID = 0x0D28; // NXP pnpID.productID = 0x0204; // CMSIS-DAP (well, it's a keyboard but oh well) pnpID.productVersion = 0x0100; // v1.0 HIDDeviceInformationService deviceInfo(ble, ARM , m1 , abc , def , ghi , jkl , pnpID); BatteryService batteryInfo(ble, 80); ble.gap().accumulateAdvertisingPayload(GapAdvertisingData::BREDR_NOT_SUPPORTED | GapAdvertisingData::LE_GENERAL_DISCOVERABLE); ble.gap().accumulateAdvertisingPayload(GapAdvertisingData::COMPLETE_LIST_16BIT_SERVICE_IDS, (uint8_t *)uuid16_list, sizeof(uuid16_list)); // see 5.1.2: HID over GATT Specification (pg. 25) ble.gap().setAdvertisingType(GapAdvertisingParams::ADV_CONNECTABLE_UNDIRECTED); // 30ms to 50ms is recommended (5.1.2) ble.gap().setAdvertisingInterval(50); } The above is then implemented as the class bitboard","title":"mbed Prototype"},{"location":"mbed/#implementation-of-ble-hid-keyboard-service-in-mbed","text":"This implementation requires the following library #include mbed.h #include ble/BLE.h #include KeyboardService.h #include MicroBitPin.h #include examples_common.h #include MicroBit.h We must first construct a BLE and KeyboardService object, and also declare some of the pins we will use on the micro:bit as inputs and outputs // Construct BLE and KeyboardService object BLE ble; KeyboardService *kbdServicePtr; // pins on the micro:bit on the LED matrix DigitalOut col9(P0_12, 0); DigitalOut waiting_led(P0_13); DigitalOut connected_led(P0_15); // pins on the micro:bit for button A and B InterruptIn button1(BUTTON_A); InterruptIn button2(BUTTON_B); // pins for touch switch and joystick DigitalIn touch1(MICROBIT_PIN_P13); AnalogIn x_axis(MICROBIT_PIN_P0); AnalogIn y_axis(MICROBIT_PIN_P1); Several functions are also defined here. We first define callback functions in the event of a connection, disconnection and waiting for connection. static void onDisconnect(const Gap::DisconnectionCallbackParams_t *params) { HID_DEBUG( disconnected\\r\\n ); connected_led = 0; ble.gap().startAdvertising(); // restart advertising } static void onConnect(const Gap::ConnectionCallbackParams_t *params) { HID_DEBUG( connected\\r\\n ); waiting_led = false; } static void waiting() { if (!kbdServicePtr- isConnected()) waiting_led = !waiting_led; else connected_led = !connected_led; } void send_string(const char * c) { if (!kbdServicePtr) return; if (!kbdServicePtr- isConnected()) { HID_DEBUG( we haven't connected yet... ); } else { int len = strlen(c); kbdServicePtr- printf(c); HID_DEBUG( sending %d chars\\r\\n , len); } } We define some functions for joystick and touch switch inputs void JoystickControl(){ float x,y; // threshold values for the joystick to convert analogue input to digital x = x_axis.read(); if (x 0.05f) send_left(); if (x 0.95f) send_right(); y = y_axis.read(); if (y 0.05f) send_down(); if (y 0.95f) send_up(); wait(0.05); } void touch_control(){ if (touch1 == 1) send_space(); wait(0.05); }","title":"Implementation of BLE HID Keyboard service in Mbed"},{"location":"mbed/#within-main","text":"A ticker object is created to call waiting() in every certain amount of time, in this case, we will choose 1 second. Ticker heartbeat; // call function send_one and send_zero if button A and B is pressed on the rising edge button1.rise(send_one); button2.rise(send_zero); // call waiting every 1 second using the ticker object heartbeat.attach(waiting, 1); The BLE object needs to be initialised after being constructed, the callback function onConnect and onDisconnect is also 'attached' in the event of a connect and disconnect sent from the GAP service. // initialise ble object ble.init(); // attach callback functions on the event of connection and disconnection ble.gap().onDisconnection(onDisconnect); ble.gap().onConnection(onConnect); For the micro:bit to advertise itself as a BLE HID Keyboard, the BLE object must contain the suitable security properties, device information and battery service information. initializeSecurity(ble) adds security properties required KeyboardService(ble) adds a keyboard service to the GATT table inside the BLE object (BLE_HID/KeyboardService.h) initializeHOGP(ble) adds more information to the BLE object, such as a pnp id and battery service information required for HOGP (HID Over Gatt Protocol) initializeSecurity(ble); KeyboardService kbdService(ble); kbdServicePtr = kbdService; initializeHOGP(ble); GAP handles device discovery, link establishment, link termination and more. The GAP service is then used to advertise the micro:bit as a BLE HID Keyboard. // setting up gap service ble.gap().accumulateAdvertisingPayload(GapAdvertisingData::KEYBOARD); ble.gap().accumulateAdvertisingPayload(GapAdvertisingData::COMPLETE_LOCAL_NAME, (uint8_t *)DEVICE_NAME, sizeof(DEVICE_NAME)); ble.gap().accumulateAdvertisingPayload(GapAdvertisingData::SHORTENED_LOCAL_NAME, (uint8_t *)SHORT_DEVICE_NAME, sizeof(SHORT_DEVICE_NAME)); ble.gap().setDeviceName((const uint8_t *)DEVICE_NAME); // advertise device ble.gap().startAdvertising(); We then implement a polling rate of 125Hz for the keyboard. 125Hz is chosen instead of 1000Hz to conserve power. while (true) { ble.waitForEvent(); JoystickControl(); touch_control(); // poll every 8ms, or 125Hz wait_ms(8); }","title":"Within main"},{"location":"mbed/#inside-initializesecurity","text":"It is important to initialize the security properties for the BLE object, this is done to prevent the security issues during the pairing process, these security issues include: Passive eavesdropping MITM (man-in-the-middle) attacks Identity tracking. void initializeSecurity(BLE ble) { bool enableBonding = true; bool requireMITM = HID_SECURITY_REQUIRE_MITM; ble.securityManager().onSecuritySetupInitiated(securitySetupInitiatedCallback); ble.securityManager().onPasskeyDisplay(passkeyDisplayCallback); ble.securityManager().onSecuritySetupCompleted(securitySetupCompletedCallback); ble.securityManager().init(enableBonding, requireMITM, HID_SECURITY_IOCAPS); }","title":"Inside initializeSecurity()"},{"location":"mbed/#inside-initializehogp","text":"Device information and Battery service is required for the device to advertise itself to client device. void initializeHOGP(BLE ble) { static const uint16_t uuid16_list[] = {GattService::UUID_HUMAN_INTERFACE_DEVICE_SERVICE, GattService::UUID_DEVICE_INFORMATION_SERVICE, GattService::UUID_BATTERY_SERVICE}; PnPID_t pnpID; pnpID.vendorID_source = 0x2; // from the USB Implementer's Forum pnpID.vendorID = 0x0D28; // NXP pnpID.productID = 0x0204; // CMSIS-DAP (well, it's a keyboard but oh well) pnpID.productVersion = 0x0100; // v1.0 HIDDeviceInformationService deviceInfo(ble, ARM , m1 , abc , def , ghi , jkl , pnpID); BatteryService batteryInfo(ble, 80); ble.gap().accumulateAdvertisingPayload(GapAdvertisingData::BREDR_NOT_SUPPORTED | GapAdvertisingData::LE_GENERAL_DISCOVERABLE); ble.gap().accumulateAdvertisingPayload(GapAdvertisingData::COMPLETE_LIST_16BIT_SERVICE_IDS, (uint8_t *)uuid16_list, sizeof(uuid16_list)); // see 5.1.2: HID over GATT Specification (pg. 25) ble.gap().setAdvertisingType(GapAdvertisingParams::ADV_CONNECTABLE_UNDIRECTED); // 30ms to 50ms is recommended (5.1.2) ble.gap().setAdvertisingInterval(50); }","title":"Inside initializeHOGP()"},{"location":"mbed/#the-above-is-then-implemented-as-the-class-bitboard","text":"","title":"The above is then implemented as the class bitboard"},{"location":"physical_design/","text":"Physical Design Material In order to keep the prototype as environmental-friendly as possible, the main material used to create the prototype is birch plywood instead of acrylic. Dimensions The ideal size of the product should be small enough for the user to keep it inside a school bag . The file used for laser cutting and the dimensions for all the parts can be found here: https://github.com/bit-board/bitboard/blob/master/code/bitboard_lasercut.svg Wooden Case Panel Dimension (mm x mm) Left (LP) 272 x 18 Inner Left (ILP) 260 x 15 Right (RP) 240 x 18 Inner Right (IRP) 235 x 15 Front (FP) 216 x 18 Inner Front (IFP) 210 x 15 Back (BP) 80 x 18 Inner Back (IBP) 76 x 15 Extended Back (EBP) 71 x 18 Cushion (C) 210 x 40 Top Cover Cutouts Cutout Dimension (mm x mm) Diameter (mm) Touch Sensor 16 x 6 - Paper Canvas Clip 190 x 7 - Joystick - 30 LED - 5 Paper Canvas A5-sized paper is suggested to be the size of the canvas because it is easily accessible by cutting an A4 paper into halves. The paper canvas can also be replaced with a fresh new piece simply by sliding the old paper out of the cable clips then slide in the new one. Assembly After all the panels required to build the case for the prototype were laser cut, all the panels were bound together using super glue except the cover. The micro:bit breakout board was secured onto the base of the case and the stripboard was secured onto the cushion panel. Each of the cable clips had a wire soldered onto it before being secured to the cover. Wires from the touch sensors were passed through the small rectangular holes on the cover before sticking the sensor onto the cover. The wires from the touch sensors were then plugged into their respective headers available on the stripboard. Wires soldered onto the stripboard were plugged into one of the rows of headers on the micro:bit breakout board. Wires from the cable clips were also plugged into the other row of headers on the breakout board. The lengths of all the wires were adjusted to ensure that the wooden case could be closed with the cover before securing it with the glue.","title":"Physical Design"},{"location":"physical_design/#physical-design","text":"","title":"Physical Design"},{"location":"physical_design/#material","text":"In order to keep the prototype as environmental-friendly as possible, the main material used to create the prototype is birch plywood instead of acrylic.","title":"Material"},{"location":"physical_design/#dimensions","text":"The ideal size of the product should be small enough for the user to keep it inside a school bag . The file used for laser cutting and the dimensions for all the parts can be found here: https://github.com/bit-board/bitboard/blob/master/code/bitboard_lasercut.svg","title":"Dimensions"},{"location":"physical_design/#wooden-case","text":"Panel Dimension (mm x mm) Left (LP) 272 x 18 Inner Left (ILP) 260 x 15 Right (RP) 240 x 18 Inner Right (IRP) 235 x 15 Front (FP) 216 x 18 Inner Front (IFP) 210 x 15 Back (BP) 80 x 18 Inner Back (IBP) 76 x 15 Extended Back (EBP) 71 x 18 Cushion (C) 210 x 40","title":"Wooden Case"},{"location":"physical_design/#top-cover-cutouts","text":"Cutout Dimension (mm x mm) Diameter (mm) Touch Sensor 16 x 6 - Paper Canvas Clip 190 x 7 - Joystick - 30 LED - 5","title":"Top Cover Cutouts"},{"location":"physical_design/#paper-canvas","text":"A5-sized paper is suggested to be the size of the canvas because it is easily accessible by cutting an A4 paper into halves. The paper canvas can also be replaced with a fresh new piece simply by sliding the old paper out of the cable clips then slide in the new one.","title":"Paper Canvas"},{"location":"physical_design/#assembly","text":"After all the panels required to build the case for the prototype were laser cut, all the panels were bound together using super glue except the cover. The micro:bit breakout board was secured onto the base of the case and the stripboard was secured onto the cushion panel. Each of the cable clips had a wire soldered onto it before being secured to the cover. Wires from the touch sensors were passed through the small rectangular holes on the cover before sticking the sensor onto the cover. The wires from the touch sensors were then plugged into their respective headers available on the stripboard. Wires soldered onto the stripboard were plugged into one of the rows of headers on the micro:bit breakout board. Wires from the cable clips were also plugged into the other row of headers on the breakout board. The lengths of all the wires were adjusted to ensure that the wooden case could be closed with the cover before securing it with the glue.","title":"Assembly"},{"location":"printed_circuit_board/","text":"Printed Circuit Board (PCB) Instead of using a stripboard to make the electrical connections for the fixed set of inputs, a printed circuit board will be made for the actual product itself. Based on the circuit diagram used for the prototype, most components were preserved for the build of the PCB except for the touch sensors. The PCB will have a self-made touch sensor circuit on it by making use of the reference circuit provided by the TTP223 IC datasheet. The files required to produce the PCB can be downloaded here: https://github.com/bit-board/bitboard/blob/master/code/bitboard_PCB.zip PCB Schematic The following schematic file details every pin connection required for the implementation of the inputs: PCB Layout After creating the schematic file, the layout of the components on the PCB is optimised to reduce the wire lengths as shown here: Benefits By using a printed circuit board, the area required can be further reduced since physical wires can be omitted and some through hole components can be replaced with surface mount devices, which are smaller in size. Another benefit of having a more compact circuitry for the inputs is that the electrical connections are more secure, hence increasing the reliability of the product.","title":"Printed Circuit Board (PCB)"},{"location":"printed_circuit_board/#printed-circuit-board-pcb","text":"Instead of using a stripboard to make the electrical connections for the fixed set of inputs, a printed circuit board will be made for the actual product itself. Based on the circuit diagram used for the prototype, most components were preserved for the build of the PCB except for the touch sensors. The PCB will have a self-made touch sensor circuit on it by making use of the reference circuit provided by the TTP223 IC datasheet. The files required to produce the PCB can be downloaded here: https://github.com/bit-board/bitboard/blob/master/code/bitboard_PCB.zip","title":"Printed Circuit Board (PCB)"},{"location":"printed_circuit_board/#pcb-schematic","text":"The following schematic file details every pin connection required for the implementation of the inputs:","title":"PCB Schematic"},{"location":"printed_circuit_board/#pcb-layout","text":"After creating the schematic file, the layout of the components on the PCB is optimised to reduce the wire lengths as shown here:","title":"PCB Layout"},{"location":"printed_circuit_board/#benefits","text":"By using a printed circuit board, the area required can be further reduced since physical wires can be omitted and some through hole components can be replaced with surface mount devices, which are smaller in size. Another benefit of having a more compact circuitry for the inputs is that the electrical connections are more secure, hence increasing the reliability of the product.","title":"Benefits"},{"location":"problem_statement/","text":"Problem Statement: No existing accessory on the market suitable for learning about electronics and hardware. No existing accessory on the market encapsulates unnecessary details (edge connector, breakout board, breadboards) in the learning environment for year 7 users. Soldering and making connections can prove to be difficult for younger user, especially in the target user base. No available BLE HID Keyboard service on the micro:bit. Accessories on the market does not allow user to use their creativity to form a solution. Most of them add inputs that are connected to pins in the micro:bit using the breakout board. Ideas: The term \"Target Audience\" below refers to our target group of students at around the age of 11 (Year 7). - We want to create an environment for the target audience to learn about electronics. - Create an environment that has the right amount of complexity for the target audience Not too difficult, such that the target audience will feel repulsive in the learning process Not too simple, such that the product will limit what the target audience can learn from it. Enough capacity for users to utilize and develop their creative problem solving skillsets. Not everything they use is out-of-the-box, they have to create their own circuit solutions Adequate amount of components provided to them out-of-the-box joysticks, switches, dials acts as additional material off-the-shelf components are more reliable than drawn circuits, which serves as backup solutions develops an understanding of micro:bit and bit:board, despite being at their initial stage of learning about electronics and software. - Create a sandbox for the target audience to \"get their hands dirty\", where there is a larger DIY factor. Learn about the nature of electronic circuits Digital signals (i.e. highs and lows, ones and zeroes) Making connections Different components ( e.g. Potentiometer, a switch ) VCC and ground Allows younger audience to develop motor skills - It should serve a similar purpose as MakeCode Their work should be able to be displayed in front of them clearly Sense of achievement Easy debugging Easy sharing amongst fellow users Ideal for teachers to oversee user's work - Should serve other purposes other than learning about programming and circuits Users can use this as a method for interactive story telling - please see 'IgIC Conductive Ink'. Users can use this product to participate in classroom activities (e.g. Kahoot Quizzes). - Overall, product should give a positive association with learning about electronics Inspiration IgIC Conductive Ink * This video demonstrates more on the DIY side that we want our product to achieve Concerns Need to tune the amount of encapsulation such that it will give a positive learning experience to the target user audience Need to create guides that teaches target user audience about electronics circuit and components (e.g. potentiometer) Need to consider the reliability of said components (i.e. pencil drawn potentiometer) Need to consider undefined behaviours by the user (e.g. connecting VCC to ground)","title":"Problem Statement"},{"location":"problem_statement/#problem-statement","text":"No existing accessory on the market suitable for learning about electronics and hardware. No existing accessory on the market encapsulates unnecessary details (edge connector, breakout board, breadboards) in the learning environment for year 7 users. Soldering and making connections can prove to be difficult for younger user, especially in the target user base. No available BLE HID Keyboard service on the micro:bit. Accessories on the market does not allow user to use their creativity to form a solution. Most of them add inputs that are connected to pins in the micro:bit using the breakout board.","title":"Problem Statement:"},{"location":"problem_statement/#ideas","text":"The term \"Target Audience\" below refers to our target group of students at around the age of 11 (Year 7).","title":"Ideas:"},{"location":"problem_statement/#-we-want-to-create-an-environment-for-the-target-audience-to-learn-about-electronics","text":"","title":"- We want to create an environment for the target audience to learn about electronics."},{"location":"problem_statement/#-create-an-environment-that-has-the-right-amount-of-complexity-for-the-target-audience","text":"Not too difficult, such that the target audience will feel repulsive in the learning process Not too simple, such that the product will limit what the target audience can learn from it. Enough capacity for users to utilize and develop their creative problem solving skillsets. Not everything they use is out-of-the-box, they have to create their own circuit solutions Adequate amount of components provided to them out-of-the-box joysticks, switches, dials acts as additional material off-the-shelf components are more reliable than drawn circuits, which serves as backup solutions develops an understanding of micro:bit and bit:board, despite being at their initial stage of learning about electronics and software.","title":"- Create an environment that has the right amount of complexity for the target audience"},{"location":"problem_statement/#-create-a-sandbox-for-the-target-audience-to-get-their-hands-dirty-where-there-is-a-larger-diy-factor","text":"Learn about the nature of electronic circuits Digital signals (i.e. highs and lows, ones and zeroes) Making connections Different components ( e.g. Potentiometer, a switch ) VCC and ground Allows younger audience to develop motor skills","title":"- Create a sandbox for the target audience to \"get their hands dirty\", where there is a larger DIY factor."},{"location":"problem_statement/#-it-should-serve-a-similar-purpose-as-makecode","text":"Their work should be able to be displayed in front of them clearly Sense of achievement Easy debugging Easy sharing amongst fellow users Ideal for teachers to oversee user's work","title":"- It should serve a similar purpose as MakeCode"},{"location":"problem_statement/#-should-serve-other-purposes-other-than-learning-about-programming-and-circuits","text":"Users can use this as a method for interactive story telling - please see 'IgIC Conductive Ink'. Users can use this product to participate in classroom activities (e.g. Kahoot Quizzes).","title":"- Should serve other purposes other than learning about programming and circuits"},{"location":"problem_statement/#-overall-product-should-give-a-positive-association-with-learning-about-electronics","text":"","title":"- Overall, product should give a positive association with learning about electronics"},{"location":"problem_statement/#inspiration","text":"IgIC Conductive Ink * This video demonstrates more on the DIY side that we want our product to achieve","title":"Inspiration"},{"location":"problem_statement/#concerns","text":"Need to tune the amount of encapsulation such that it will give a positive learning experience to the target user audience Need to create guides that teaches target user audience about electronics circuit and components (e.g. potentiometer) Need to consider the reliability of said components (i.e. pencil drawn potentiometer) Need to consider undefined behaviours by the user (e.g. connecting VCC to ground)","title":"Concerns"},{"location":"progress_timeline/","text":"Progress Timeline The timeline below shows an overview of the team's progress on the project. No. Date Group Progress 1 2 May Prepared post client meeting questions for academic supervisor 2 7 May - Attended team building workshop - Discussed project requirements specifications 3 10 May - Prepared multiple solutions while waiting for reply from client - Purchased components for testing 4 13 May Identified how to claim an order for the project 5 14 May Tested joystick and touch sensors 6 16 May - Received BBC micro:bits from post - Tested the digital input pin on micro:bit - Tested the BLE keyboard service to send characters like 'n', 'p', '1', and '0' 7 17 May - Explored the micro:bit as a user rather than a developer - Contacted client again for a meeting after not receiving a reply - Sent arrow key commands like up/ down/ left/ right 8 21 May - Tested the electrical conductivity of graphite (2B/ 4B/ 6B) pencils and copper tape - Verified the use of an edge connector on a breadboard 9 23 May Confirmed the ability of using graphite track as a potentiometer 10 25 May - Researched on components to connect circuits on paper and holding the paper in place - Began creating MakeCode extension 11 28 May Finalised the physical design of the prototype 12 29 May - Identified potential demo examples for the use of the prototype - Sent an update email to the client 13 31 May - Laser cut a wooden case for the prototype - Began implementation of custom keyboard services in micro:bit DAL 14 3 Jun - Brainstormed ideas for poster and leaflet design - Allocated job for content writing 15 6 Jun - Finalised leaflet - Made major changes to the content for poster 16 7 Jun Submitted lealet for evaluation and printing 17 9 Jun Finalised and submitted poster for printing 18 10 Jun - Created GUI for demo examples - Programmed different key sets for each example 19 11 Jun - Assembled the prototype - Tested 3 demo examples on the prototype 20 12 Jun - Prepared for hackbooth - Implemented MakeCode block extension 21 13 Jun Presented prototype at hackbooth 22 18 Jun Allocated different roles for project documentation 23 23 Jun Created a GitHub Page for documentation 24 27 Jun Finalised and submitted documentation","title":"Progress Timeline"},{"location":"progress_timeline/#progress-timeline","text":"The timeline below shows an overview of the team's progress on the project. No. Date Group Progress 1 2 May Prepared post client meeting questions for academic supervisor 2 7 May - Attended team building workshop - Discussed project requirements specifications 3 10 May - Prepared multiple solutions while waiting for reply from client - Purchased components for testing 4 13 May Identified how to claim an order for the project 5 14 May Tested joystick and touch sensors 6 16 May - Received BBC micro:bits from post - Tested the digital input pin on micro:bit - Tested the BLE keyboard service to send characters like 'n', 'p', '1', and '0' 7 17 May - Explored the micro:bit as a user rather than a developer - Contacted client again for a meeting after not receiving a reply - Sent arrow key commands like up/ down/ left/ right 8 21 May - Tested the electrical conductivity of graphite (2B/ 4B/ 6B) pencils and copper tape - Verified the use of an edge connector on a breadboard 9 23 May Confirmed the ability of using graphite track as a potentiometer 10 25 May - Researched on components to connect circuits on paper and holding the paper in place - Began creating MakeCode extension 11 28 May Finalised the physical design of the prototype 12 29 May - Identified potential demo examples for the use of the prototype - Sent an update email to the client 13 31 May - Laser cut a wooden case for the prototype - Began implementation of custom keyboard services in micro:bit DAL 14 3 Jun - Brainstormed ideas for poster and leaflet design - Allocated job for content writing 15 6 Jun - Finalised leaflet - Made major changes to the content for poster 16 7 Jun Submitted lealet for evaluation and printing 17 9 Jun Finalised and submitted poster for printing 18 10 Jun - Created GUI for demo examples - Programmed different key sets for each example 19 11 Jun - Assembled the prototype - Tested 3 demo examples on the prototype 20 12 Jun - Prepared for hackbooth - Implemented MakeCode block extension 21 13 Jun Presented prototype at hackbooth 22 18 Jun Allocated different roles for project documentation 23 23 Jun Created a GitHub Page for documentation 24 27 Jun Finalised and submitted documentation","title":"Progress Timeline"},{"location":"test_verification/","text":"Test Verification To ensure that the prototype is working as intended, a few tests were conducted at different stages to identify any faults in hardware and bugs in software. Hardware Test 1: Individual electronic components Joystick When the joystick knob was slowly moved towards the up/ right position, their corresponding output values increase until slightly below the 3V applied. The output values work the other way round when the knob was moved towards the down/ left position, decreasing until close to GND . Touch Sensor When a finger was placed on the touch sensor pad, the output signal went high . When removed , the signal went low . Test 2: Multiple components on a breadboard LED, Switch Touch Sensor When the touch pad was touched , the colour of the LED changed from red to green . When the finger was lifted off the pad, the colour changed back to red . Joystick Touch Sensor Circuit When the joystick and the touch sensor circuit were used together, both outputs were still detectable since they worked independently . Test 3: Breadboard with micro:bit Joystick The following programme was used to test the joystick with the analogue input pins. When the joystick knob is moved in a specific direction then returned to the middle, the red dot on the LED screen moved a step in that direction as well. The threshold values were adjusted to set the sensitivity of the joystick. let y = 0 let x = 0 let reading_y = 0 let reading_x = 0 let dot = game.createSprite(2, 2) basic.forever(function(){ reading_x = pins.analogReadPin(AnalogPin.P0) reading_y = pins.analogReadPin(AnalogPin.P1) if (reading_x 800){ x = x + 1 } else if (reading_x 200){ x = x - 1 } else{ x = x } if (reading_y 800){ y = y - 1 } else if (reading_y 200){ y = y + 1 } else{ y = y } dot.set(LedSpriteProperty.X, x) dot.set(LedSpriteProperty.Y, y) basic.pause(100) }) Touch Sensor The following programme was used to test the touch sensor with the digital input pins. When one of the numbered touch pads were touched, the corresponding number appeared on the LED screen. basic.forever(function(){ if (pins.digitalReadPin(DigitalPin.P13) == 1){ basic.showNumber(1) } if (pins.digitalReadPin(DigitalPin.P14) == 1){ basic.showNumber(2) } if (pins.digitalReadPin(DigitalPin.P15) == 1){ basic.showNumber(3) } if (pins.digitalReadPin(DigitalPin.P16) == 1){ basic.showNumber(4) } if (pins.digitalReadPin(DigitalPin.P8) == 1){ basic.showNumber(8) } }) Both Inputs Simultaneously The two programmes used were combined to test whether the micro:bit was able to supply enough current for the implementation of the two inputs. Both results were able to be displayed, showing that the inputs can be used together. Test 4: Electrical conductivity Pencil (Graphite) Track Graphite conducts electricity but it could not be used to replace wires because it has a very high resistance , causing a huge voltage drop from one end to the other. It was used as a potentiometer instead since different voltage readings could be obtained at different points. Copper Tape Copper is a good conductor and there is no voltage drop across it. The adhesive side of the copper tape is conductive as well. Cable Clip The clip is made from copper but plated with tin . The clip is able to conduct electricity despite having the coating. allowing the clip to be used not just for securing the paper canvas but also as an electrical connection point. Software Test 1: Custom MakeCode extension Custom blocks that provide different keys of a keyboard were created using TypeScript and they were tested on the MakeCode Playground to visualise the format of the blocks. Test 2: Custom keyboard services Instead of just sending \"string\" via Bluetooth, keyboard commands such as enter and backspace were tested using the microbit_presenter Mbed file. Hardware Software Integration Test 1: Fixed inputs Joystick Thresholds for the analogue inputs were adjusted via trial and error to give the best joystick sensitivity. When the joystick knob was moved, the cursor on a word document moved in the same direction as well. Touch Sensor Some keys were represented by the touch sensors and they were outputted on a laptop screen when the touch pads were touched. Continuous outputs were shown on the screen when the finger was resting on the touch pad. Test 2: Paper canvas Pencil (Graphite) Track Crocodile clips were used to connect one of the cable clips that corresponded to an analogue input pin to a particular position on the graphite track. Different analogue readings could be obtained at different positions on the graphite track. Copper Tape Copper tape was used on the paper and the cable clips were in contact with the tape. When the copper tape was powered with 3V, the cable clip corresponding to a digital input pin could be detected, leading to a key output on the laptop screen. Test 3: Demo examples Online Game (Crossy Road) Simple online games that only require basic keys such as the arrow keys and some other keys, like WASD and spacebar , can be played using the prototype. Custom Game (Wire Loop Game) Copper tape was used to create boundaries of a track and connected to the 3V cable clip. The micro:bit will detect a high signal when the tip of the crocodile clip touches the tape. The game interface was created using Python to receive key presses from the micro:bit. Output Selector Different threshold points were used to set the boundaries on the graphite track for different output modes. 4 modes were made to illustrate letters , numbers , symbols and commands . The touch pads will then correspond to the different key outputs based on the position of the crocodile clip.","title":"Test Verification"},{"location":"test_verification/#test-verification","text":"To ensure that the prototype is working as intended, a few tests were conducted at different stages to identify any faults in hardware and bugs in software.","title":"Test &amp; Verification"},{"location":"test_verification/#hardware","text":"","title":"Hardware"},{"location":"test_verification/#test-1-individual-electronic-components","text":"Joystick When the joystick knob was slowly moved towards the up/ right position, their corresponding output values increase until slightly below the 3V applied. The output values work the other way round when the knob was moved towards the down/ left position, decreasing until close to GND . Touch Sensor When a finger was placed on the touch sensor pad, the output signal went high . When removed , the signal went low .","title":"Test 1: Individual electronic components"},{"location":"test_verification/#test-2-multiple-components-on-a-breadboard","text":"LED, Switch Touch Sensor When the touch pad was touched , the colour of the LED changed from red to green . When the finger was lifted off the pad, the colour changed back to red . Joystick Touch Sensor Circuit When the joystick and the touch sensor circuit were used together, both outputs were still detectable since they worked independently .","title":"Test 2: Multiple components on a breadboard"},{"location":"test_verification/#test-3-breadboard-with-microbit","text":"Joystick The following programme was used to test the joystick with the analogue input pins. When the joystick knob is moved in a specific direction then returned to the middle, the red dot on the LED screen moved a step in that direction as well. The threshold values were adjusted to set the sensitivity of the joystick. let y = 0 let x = 0 let reading_y = 0 let reading_x = 0 let dot = game.createSprite(2, 2) basic.forever(function(){ reading_x = pins.analogReadPin(AnalogPin.P0) reading_y = pins.analogReadPin(AnalogPin.P1) if (reading_x 800){ x = x + 1 } else if (reading_x 200){ x = x - 1 } else{ x = x } if (reading_y 800){ y = y - 1 } else if (reading_y 200){ y = y + 1 } else{ y = y } dot.set(LedSpriteProperty.X, x) dot.set(LedSpriteProperty.Y, y) basic.pause(100) }) Touch Sensor The following programme was used to test the touch sensor with the digital input pins. When one of the numbered touch pads were touched, the corresponding number appeared on the LED screen. basic.forever(function(){ if (pins.digitalReadPin(DigitalPin.P13) == 1){ basic.showNumber(1) } if (pins.digitalReadPin(DigitalPin.P14) == 1){ basic.showNumber(2) } if (pins.digitalReadPin(DigitalPin.P15) == 1){ basic.showNumber(3) } if (pins.digitalReadPin(DigitalPin.P16) == 1){ basic.showNumber(4) } if (pins.digitalReadPin(DigitalPin.P8) == 1){ basic.showNumber(8) } }) Both Inputs Simultaneously The two programmes used were combined to test whether the micro:bit was able to supply enough current for the implementation of the two inputs. Both results were able to be displayed, showing that the inputs can be used together.","title":"Test 3: Breadboard with micro:bit"},{"location":"test_verification/#test-4-electrical-conductivity","text":"Pencil (Graphite) Track Graphite conducts electricity but it could not be used to replace wires because it has a very high resistance , causing a huge voltage drop from one end to the other. It was used as a potentiometer instead since different voltage readings could be obtained at different points. Copper Tape Copper is a good conductor and there is no voltage drop across it. The adhesive side of the copper tape is conductive as well. Cable Clip The clip is made from copper but plated with tin . The clip is able to conduct electricity despite having the coating. allowing the clip to be used not just for securing the paper canvas but also as an electrical connection point.","title":"Test 4: Electrical conductivity"},{"location":"test_verification/#software","text":"","title":"Software"},{"location":"test_verification/#test-1-custom-makecode-extension","text":"Custom blocks that provide different keys of a keyboard were created using TypeScript and they were tested on the MakeCode Playground to visualise the format of the blocks.","title":"Test 1: Custom MakeCode extension"},{"location":"test_verification/#test-2-custom-keyboard-services","text":"Instead of just sending \"string\" via Bluetooth, keyboard commands such as enter and backspace were tested using the microbit_presenter Mbed file.","title":"Test 2: Custom keyboard services"},{"location":"test_verification/#hardware-software-integration","text":"","title":"Hardware &amp; Software Integration"},{"location":"test_verification/#test-1-fixed-inputs","text":"Joystick Thresholds for the analogue inputs were adjusted via trial and error to give the best joystick sensitivity. When the joystick knob was moved, the cursor on a word document moved in the same direction as well. Touch Sensor Some keys were represented by the touch sensors and they were outputted on a laptop screen when the touch pads were touched. Continuous outputs were shown on the screen when the finger was resting on the touch pad.","title":"Test 1: Fixed inputs"},{"location":"test_verification/#test-2-paper-canvas","text":"Pencil (Graphite) Track Crocodile clips were used to connect one of the cable clips that corresponded to an analogue input pin to a particular position on the graphite track. Different analogue readings could be obtained at different positions on the graphite track. Copper Tape Copper tape was used on the paper and the cable clips were in contact with the tape. When the copper tape was powered with 3V, the cable clip corresponding to a digital input pin could be detected, leading to a key output on the laptop screen.","title":"Test 2: Paper canvas"},{"location":"test_verification/#test-3-demo-examples","text":"Online Game (Crossy Road) Simple online games that only require basic keys such as the arrow keys and some other keys, like WASD and spacebar , can be played using the prototype. Custom Game (Wire Loop Game) Copper tape was used to create boundaries of a track and connected to the 3V cable clip. The micro:bit will detect a high signal when the tip of the crocodile clip touches the tape. The game interface was created using Python to receive key presses from the micro:bit. Output Selector Different threshold points were used to set the boundaries on the graphite track for different output modes. 4 modes were made to illustrate letters , numbers , symbols and commands . The touch pads will then correspond to the different key outputs based on the position of the crocodile clip.","title":"Test 3: Demo examples"}]}